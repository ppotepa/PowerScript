{
    "app.welcome": "Welcome to PowerScript Interactive Shell!",
    "app.version": "\nPowerScript Interpreter v2.0\nBuild Date: October 2025\nRuntime: .NET 8.0\nLanguage: PowerScript\n\nFeatures:\n  ✓ Interactive REPL Shell\n  ✓ Script File Execution\n  ✓ .NET Framework Integration\n  ✓ Function Compilation\n  ✓ Multi-line Input Support\n  ✓ Command History\n",
    "app.goodbye": "\nGoodbye!",
    "app.help_prompt": "Type 'HELP' for available commands, 'EXIT' to quit.",
    "shell.prompt.multiline": ">> ",
    "shell.prompt.standard": "PS> ",
    "shell.banner": "╔════════════════════════════════════════════════════════════════╗\n║              POWERSCRIPT INTERACTIVE SHELL v2.0                ║\n║          A .NET Wrapper Language Interpreter (REPL)            ║\n╚════════════════════════════════════════════════════════════════╝",
    "shell.welcome": "\nWelcome to PowerScript Interactive Shell!",
    "shell.help_hint": "Type 'HELP' for available commands, 'EXIT' to quit.",
    "shell.code_hint": "Enter PowerScript code directly at the prompt.\n",
    "shell.history.title": "\nCommand History:",
    "shell.history.empty": "  (empty)",
    "shell.help": "Built-in Shell Commands",
    "script.executing": "\n[SCRIPT MODE] Executing: {0}\n",
    "script.success": "\n✓ Script execution completed successfully.",
    "script.error": "\n✗ Script execution failed: {0}",
    "link.processing": "[DEBUG] LinkStatementProcessor: Processing LINK token '{0}' at depth {1}",
    "link.namespace": "[LINK] Linking .NET namespace: {0}",
    "link.file": "[LINK] Linking file: {0}",
    "link.already_linked": "[LINK] File already linked, skipping: {0}",
    "link.loading": "[LINK] Loading PowerScript file: {0}",
    "link.error": "[LINK] Error linking file '{0}': {1}",
    "link.library_registered": "[DEBUG] Registered well-known library link: {0}",
    "link.file_registered": "[DEBUG] Registered file link: {0}",
    "link.best_practice": "[LINK] Note: PowerScript file linking is best done via PowerScriptInterpreter.LinkLibrary()",
    "link.suggestion": "[LINK] Add this to your code before execution: interpreter.LinkLibrary(\"{0}\")",
    "tokentree.building": "\n=== Building Token Tree ===",
    "tokentree.processing": "Processing: '{0}'\n",
    "tokentree.tokens_created": "Tokens created: {0}",
    "tokentree.tokens_linked": "Tokens linked",
    "tokentree.scope_complete": "Scope creation complete\n",
    "tokentree.visualization": "\n╔════════════════════════════════════════╗\n║       TOKEN TREE VISUALIZATION         ║\n╚════════════════════════════════════════╝\n",
    "tokentree.no_root_scope": "No root scope found!",
    "compile.compiling": "📦 Compiling function: {0}",
    "compile.executing": "\n╔════════════════════════════════════════╗\n║     COMPILING & EXECUTING FUNCTIONS    ║\n╚════════════════════════════════════════╝\n",
    "compile.success": "✓ Compilation successful",
    "compile.error": "✗ Compilation failed: {0}",
    "diagnostics.errors": "ERRORS:",
    "diagnostics.warnings": "WARNINGS:",
    "diagnostics.suggestions": "SUGGESTIONS:",
    "diagnostics.info": "INFO:",
    "diagnostics.summary": "📊 Analysis complete: {0} errors, {1} warnings, {2} suggestions",
    "scope.variable_registered": "[Scope] Registered variable '{0}' with type '{1}' in scope '{2}'",
    "scope.dynamic_variable_registered": "[Scope] Registered dynamic variable '{0}' in scope '{1}'",
    "error.general": "Error: {0}",
    "error.execution": "Execution error: {0}",
    "error.compilation": "Compilation error: {0}",
    "warning.stdlib_link_failed": "[WARNING] Could not link StdLib.ps: {0}",
    "debug.link_processor": "[DEBUG] LinkStatementProcessor: Processing LINK token '{0}' at depth {1}",
    "debug.variable_declaration": "[DEBUG] VariableDeclarationProcessor: Processing VAR token in scope '{0}'",
    "stdlib.summary": "Standard Library Loaded:\n  • Math: ADD, SUBTRACT, MULTIPLY, DIVIDE, MOD, POW\n  • String: CONCAT, LENGTH, SUBSTRING, TOUPPER, TOLOWER, TRIM\n  • I/O: PRINT, PRINTLN, READ\n  • .NET Access: NET.Namespace.Class.Method(args)\n",
    "stdlib.loaded": "Standard Library Loaded:",
    "stdlib.functions.math": "  • Math: ADD, SUBTRACT, MULTIPLY, DIVIDE, MOD, POW",
    "stdlib.functions.string": "  • String: CONCAT, LENGTH, SUBSTRING, TOUPPER, TOLOWER, TRIM",
    "stdlib.functions.io": "  • I/O: PRINT, PRINTLN, READ",
    "stdlib.functions.net": "  • .NET Access: NET.Namespace.Class.Method(args)\n",
    "help.title": "╔══════════════════════════════════════════════════════════════╗\n║                    POWERSCRIPT HELP                          ║\n╚══════════════════════════════════════════════════════════════╝",
    "help.commands": "\nBuilt-in Shell Commands:\n  HELP            Show this help message\n  EXIT, QUIT      Exit the interpreter\n  CLEAR, CLS      Clear the screen\n  HISTORY         Show command history\n  VERSION         Show version information\n  ABOUT           About PowerScript\n",
    "help.syntax": "\nPowerScript Syntax:\n  PRINT \"text\"                    Print output\n  VAR name = value                 Declare variable\n  VAR INT name = value             Declare typed variable\n  NET.System.Console.WriteLine()  Call .NET methods\n  EXECUTE \"file.ps\"                Execute script file\n  FUNCTION name(params) { ... }    Define function\n  RETURN expression                Return from function\n",
    "help.examples": "\nExamples:\n  PS> PRINT \"Hello, World!\"\n  PS> VAR x = 10\n  PS> VAR INT count = 5\n  PS> NET.System.Console.WriteLine(\"From .NET!\")\n  PS> EXECUTE \"myscript.ps\"\n  PS> FUNCTION ADD(INT a, INT b) { RETURN a + b }\n",
    "help.about_title": "╔══════════════════════════════════════════════════════════════╗\n║                  ABOUT POWERSCRIPT                           ║\n╚══════════════════════════════════════════════════════════════╝",
    "help.about_content": "\nPowerScript is a .NET wrapper language with an interactive\ninterpreter shell. It provides direct access to the .NET\nFramework through a simple, PowerShell-like syntax.\n\nKey Features:\n  • Direct .NET method invocation via NET. syntax\n  • Function compilation to Lambda expressions\n  • Script file execution and imports\n  • Interactive REPL for rapid development\n  • PowerShell-like command interface\n\nArchitecture:\n  • Token-based lexical analysis\n  • AST construction and traversal\n  • Reflection-based .NET integration\n  • Expression tree compilation\n  • Persistent interpreter session\n",
    "help.command.help": "  HELP            Show this help message",
    "help.command.exit": "  EXIT, QUIT      Exit the interpreter",
    "help.command.clear": "  CLEAR, CLS      Clear the screen",
    "help.command.history": "  HISTORY         Show command history",
    "help.command.version": "  VERSION         Show version information",
    "help.command.about": "  ABOUT           About PowerScript"
}