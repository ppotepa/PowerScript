using NUnit.Framework;
using Tokenez.Interpreter;

namespace Tokenez.Integration.Tests;

[TestFixture]
[Category("Complex")]
[Description("Complex feature tests covering advanced language constructs and combinations")]
public class ComplexFeatureTests
{
    [SetUp]
    public void Setup()
    {
#pragma warning disable CS0618 // Type or member is obsolete
        _interpreter = PowerScriptInterpreter.CreateNew();
#pragma warning restore CS0618

        // Link the standard library
        string stdLibPath = Path.Combine("..", "..", "scripts", "stdlib", "StdLib.ps");
        if (File.Exists(stdLibPath))
        {
            _interpreter.LinkLibrary(stdLibPath);
        }

        _output = new StringWriter();
        Console.SetOut(_output);
    }

    [TearDown]
    public void TearDown()
    {
        _output?.Dispose();
        Console.SetOut(Console.Out);
    }

    private PowerScriptInterpreter _interpreter;
    private StringWriter _output;

    private string GetOutput()
    {
        return _output.ToString();
    }

    [Test]
    [Category("Arrays")]
    [Description("Test 3.1: Bubble sort algorithm with array literals")]
    public void Test_3_1_BubbleSort()
    {
        string script = File.ReadAllText("scripts/complex/3_1_bubble_sort.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        // Verify sorted output contains numbers in ascending order
        Assert.That(output, Does.Contain("11"), "Should contain smallest number");
        Assert.That(output, Does.Contain("90"), "Should contain largest number");
    }

    [Test]
    [Category("Arrays")]
    [Description("Test 3.2: Multi-dimensional array simulation (matrix operations)")]
    public void Test_3_2_MatrixOperations()
    {
        string script = File.ReadAllText("scripts/complex/3_2_matrix_operations.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        Assert.That(output, Is.Not.Empty, "Should produce output");
    }

    [Test]
    [Category("Pathfinding")]
    [Description("Test 3.3: Maze solver using 1D array as 2D grid")]
    public void Test_3_3_MazeSolver()
    {
        string script = File.ReadAllText("scripts/complex/3_3_maze_solver.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        Assert.That(output, Does.Contain("Path found"), "Should find a path through the maze");
        Assert.That(output, Does.Contain("8"), "Path length should be 8");
    }

    [Test]
    [Category("Loops")]
    [Description("Test 3.4: Auto-generated loop variables (A, B, C)")]
    public void Test_3_4_AutoGeneratedVariables()
    {
        string script = File.ReadAllText("scripts/complex/3_4_auto_generated_variables.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        // Should print A values (0, 1) and B values (0, 1, 2) for each A
        Assert.That(output, Does.Contain("0"), "Should contain A=0");
        Assert.That(output, Does.Contain("1"), "Should contain A=1 or B=1");
        Assert.That(output, Does.Contain("2"), "Should contain B=2");
    }

    [Test]
    [Category("Loops")]
    [Description("Test 3.5: Triple-nested auto-generated loop variables (A, B, C)")]
    public void Test_3_5_TripleNestedLoops()
    {
        string script = File.ReadAllText("scripts/complex/3_5_triple_nested_loops.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        Assert.That(output, Does.Contain("8"), "2*2*2 iterations should give count=8");
    }

    [Test]
    [Category("Loops")]
    [Description("Test 3.6: Mixed explicit and auto-generated loop variables")]
    [Ignore("Parser loop variable name handling issue - see PARSER_ISSUES.md")]
    public void Test_3_6_MixedLoopVariables()
    {
        string script = File.ReadAllText("scripts/complex/3_6_mixed_loop_variables.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        // outer is explicitly named, inner loop gets 'A'
        Assert.That(output, Does.Contain("0"), "Should contain outer=0");
        Assert.That(output, Does.Contain("1"), "Should contain outer=1");
    }

    [Test]
    [Category("Recursion")]
    [Description("Test 3.7: Factorial using recursion")]
    [Ignore(
        "Stack overflow due to evaluation order in recursive calls with expression arguments. Requires refactoring of ParseFunctionArguments and BuildExpressionFromTokens to use lazy evaluation.")]
    public void Test_3_7_Factorial()
    {
        string script = File.ReadAllText("scripts/complex/3_7_factorial.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        Assert.That(output, Does.Contain("120"), "5! should be 120");
    }

    [Test]
    [Category("Recursion")]
    [Description("Test 3.8: Fibonacci sequence using recursion")]
    [Ignore(
        "Stack overflow due to evaluation order in recursive calls with expression arguments. Requires refactoring of ParseFunctionArguments and BuildExpressionFromTokens to use lazy evaluation.")]
    public void Test_3_8_Fibonacci()
    {
        string script = File.ReadAllText("scripts/complex/3_8_fibonacci.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        Assert.That(output, Does.Contain("13"), "7th Fibonacci number should be 13");
    }

    [Test]
    [Category("Algorithms")]
    [Description("Test 3.9: Prime number detection")]
    [Ignore("Parser does not populate FunctionCallExpression.Arguments - see PARSER_ISSUES.md")]
    public void Test_3_9_PrimeDetection()
    {
        string script = File.ReadAllText("scripts/complex/3_9_prime_detection.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        Assert.That(output, Does.Contain("1"), "17 is prime");
        Assert.That(output, Does.Contain("0"), "18 is not prime");
    }

    [Test]
    [Category("Algorithms")]
    [Description("Test 3.10: Greatest Common Divisor (GCD) using Euclidean algorithm")]
    [Ignore("Parser does not populate FunctionCallExpression.Arguments - see PARSER_ISSUES.md")]
    public void Test_3_10_GCD()
    {
        string script = File.ReadAllText("scripts/complex/3_10_gcd.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        Assert.That(output, Does.Contain("6"), "GCD of 48 and 18 should be 6");
    }

    [Test]
    [Category("ControlFlow")]
    [Description("Test 3.11: Nested IF statements with complex conditions")]
    public void Test_3_11_NestedConditions()
    {
        string script = File.ReadAllText("scripts/complex/3_11_nested_conditions.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        Assert.That(output, Does.Contain("z is between x and y"), "Should execute nested IF");
    }

    [Test]
    [Category("ControlFlow")]
    [Description("Test 3.12: Complex loop breaking logic")]
    public void Test_3_12_LoopBreaking()
    {
        string script = File.ReadAllText("scripts/complex/3_12_loop_breaking.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        Assert.That(output, Does.Contain("Found target"), "Should find target");
        Assert.That(output, Does.Contain("Search successful"), "Should confirm success");
    }

    [Test]
    [Category("DataStructures")]
    [Description("Test 3.13: Stack simulation using array")]
    public void Test_3_13_StackSimulation()
    {
        string script = File.ReadAllText("scripts/complex/3_13_stack_simulation.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        Assert.That(output, Does.Contain("30"), "Should pop value 30");
    }

    [Test]
    [Category("DataStructures")]
    [Description("Test 3.14: Queue simulation using array")]
    public void Test_3_14_QueueSimulation()
    {
        string script = File.ReadAllText("scripts/complex/3_14_queue_simulation.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        Assert.That(output, Does.Contain("5"), "Should dequeue value 5 (FIFO)");
    }

    [Test]
    [Category("Math")]
    [Description("Test 3.15: Power function (exponentiation)")]
    [Ignore("Parser does not populate FunctionCallExpression.Arguments - see PARSER_ISSUES.md")]
    public void Test_3_15_PowerFunction()
    {
        string script = File.ReadAllText("scripts/complex/3_15_power_function.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        Assert.That(output, Does.Contain("256"), "2^8 should be 256");
    }

    [Test]
    [Category("Math")]
    [Description("Test 3.16: Square root approximation using Newton's method")]
    [Ignore("Parser does not populate FunctionCallExpression.Arguments - see PARSER_ISSUES.md")]
    public void Test_3_16_SquareRoot()
    {
        string script = File.ReadAllText("scripts/complex/3_16_square_root.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        Assert.That(output, Does.Contain("4"), "Square root of 16 should be approximately 4");
    }

    [Test]
    [Category("Arrays")]
    [Description("Test 3.17: Array reversal")]
    public void Test_3_17_ArrayReversal()
    {
        string script = File.ReadAllText("scripts/complex/3_17_array_reversal.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        Assert.That(output, Does.Contain("5"), "First element should be 5");
        Assert.That(output, Does.Contain("1"), "Last element should be 1");
    }

    [Test]
    [Category("Algorithms")]
    [Description("Test 3.18: Linear search in array")]
    public void Test_3_18_LinearSearch()
    {
        string script = File.ReadAllText("scripts/complex/3_18_linear_search.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        Assert.That(output, Does.Contain("4"), "Target 9 should be found at index 4");
    }

    [Test]
    [Category("Performance")]
    [Description("Test 3.19: Deep nesting stress test")]
    public void Test_3_19_DeepNesting()
    {
        string script = File.ReadAllText("scripts/complex/3_19_deep_nesting.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        Assert.That(output, Does.Contain("100"), "5*5*4 iterations should give sum=100");
    }

    [Test]
    [Category("Performance")]
    [Description("Test 3.20: Large array operations")]
    public void Test_3_20_LargeArray()
    {
        string script = File.ReadAllText("scripts/complex/3_20_large_array.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        Assert.That(output, Does.Contain("210"), "Sum of 1 to 20 should be 210");
    }

    [Test]
    [Category("EdgeCases")]
    [Description("Test 3.21: Zero iterations loop")]
    public void Test_3_21_ZeroIterations()
    {
        string script = File.ReadAllText("scripts/complex/3_21_zero_iterations.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        Assert.That(output, Does.Contain("0"), "Count should remain 0");
    }

    [Test]
    [Category("EdgeCases")]
    [Description("Test 3.22: Division and modulo operations")]
    public void Test_3_22_DivisionModulo()
    {
        string script = File.ReadAllText("scripts/complex/3_22_division_modulo.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        Assert.That(output, Does.Contain("3"), "17 / 5 should be 3");
        Assert.That(output, Does.Contain("2"), "17 % 5 should be 2");
    }

    [Test]
    [Category("EdgeCases")]
    [Description("Test 3.23: Operator precedence")]
    public void Test_3_23_OperatorPrecedence()
    {
        string script = File.ReadAllText("scripts/complex/3_23_operator_precedence.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        // Depending on implementation, should respect precedence
        Assert.That(output, Is.Not.Empty, "Should produce a result");
    }

    [Test]
    [Category("Integration")]
    [Description("Test 3.24: Complete program combining multiple features")]
    [Ignore("Parser does not populate FunctionCallExpression.Arguments - see PARSER_ISSUES.md")]
    public void Test_3_24_IntegrationTest()
    {
        string script = File.ReadAllText("scripts/complex/3_24_integration_test.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        // 2^2 + 4^2 + 6^2 + 8^2 + 10^2 = 4 + 16 + 36 + 64 + 100 = 220
        Assert.That(output, Does.Contain("220"), "Sum of squares of even numbers should be 220");
    }

    [Test]
    [Category("Integration")]
    [Description("Test 3.25: Collatz conjecture sequence")]
    public void Test_3_25_CollatzSequence()
    {
        string script = File.ReadAllText("scripts/complex/3_25_collatz_sequence.ps");
        Assert.DoesNotThrow(() => _interpreter.ExecuteCode(script));

        string output = GetOutput();
        Assert.That(output, Does.Contain("6"), "Collatz sequence from 10 takes 6 steps");
    }
}