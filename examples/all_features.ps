// ============================================================================
// PowerScript - All Language Features Demo
// ============================================================================
// This file demonstrates every feature of the PowerScript language in action.
// Run this file to verify all language capabilities are working correctly.
// ============================================================================

PRINT "=== PowerScript Language Features Demo ==="
PRINT ""

// ============================================================================
// 1. VARIABLE DECLARATIONS & TYPE SYSTEM
// ============================================================================

PRINT "--- 1. Type System ---"

// Static type declarations
INT age = 25
STRING name = "PowerScript"
NUMBER count = 100
NUMBER pi = 3

PRINT "INT: "
PRINT age
PRINT "STRING: "
PRINT name  
PRINT "NUMBER (int): "
PRINT count
PRINT "NUMBER (decimal equivalent): "
PRINT pi

// Dynamic FLEX type
FLEX flexInt = 42
FLEX flexString = "dynamic"

PRINT "FLEX (int): "
PRINT flexInt
PRINT "FLEX (string): "
PRINT flexString

// Strict auto-typed VAR
VAR autoInt = 100
VAR autoString = "inferred"

PRINT "VAR (auto int): "
PRINT autoInt
PRINT "VAR (auto string): "
PRINT autoString
PRINT ""

// ============================================================================
// 2. ARITHMETIC OPERATIONS
// ============================================================================

PRINT "--- 2. Arithmetic Operations ---"

FLEX sum = 10 + 5
FLEX diff = 10 - 5
FLEX product = 10 * 5
FLEX quotient = 10 / 5
FLEX remainder = 10 % 3

PRINT "10 + 5 = "
PRINT sum
PRINT "10 - 5 = "
PRINT diff
PRINT "10 * 5 = "
PRINT product
PRINT "10 / 5 = "
PRINT quotient
PRINT "10 % 3 = "
PRINT remainder

// Operator precedence
FLEX precedence1 = 2 + 3 * 4
FLEX precedence2 = (2 + 3) * 4

PRINT "2 + 3 * 4 = "
PRINT precedence1
PRINT "(2 + 3) * 4 = "
PRINT precedence2
PRINT ""

// ============================================================================
// 3. COMPARISON OPERATORS
// ============================================================================

PRINT "--- 3. Comparison Operators ---"

FLEX a = 10
FLEX b = 20

PRINT "a = 10, b = 20"

IF a > b {
    PRINT "a > b: true"
} ELSE {
    PRINT "a > b: false"
}

IF a < b {
    PRINT "a < b: true"
} ELSE {
    PRINT "a < b: false"
}

IF a == 10 {
    PRINT "a == 10: true"
} ELSE {
    PRINT "a == 10: false"
}

IF a != b {
    PRINT "a != b: true"
} ELSE {
    PRINT "a != b: false"
}

IF a >= 10 {
    PRINT "a >= 10: true"
} ELSE {
    PRINT "a >= 10: false"
}

IF b <= 20 {
    PRINT "b <= 20: true"
} ELSE {
    PRINT "b <= 20: false"
}
PRINT ""

// ============================================================================
// 4. LOGICAL OPERATORS
// ============================================================================

PRINT "--- 4. Logical Operators ---"

FLEX hasLicense = 1
FLEX hasAge = 1

IF hasAge == 1 AND hasLicense == 1 {
    PRINT "AND: Both conditions true"
}

IF hasAge == 1 OR hasLicense == 0 {
    PRINT "OR: At least one condition true"
}
PRINT ""

// ============================================================================
// 5. STRING FEATURES
// ============================================================================

PRINT "--- 5. String Features ---"

// String concatenation
FLEX greeting = "Hello" + " " + "World"
PRINT "Concatenation: "
PRINT greeting
PRINT ""

// ============================================================================
// 6. ARRAYS
// ============================================================================

PRINT "--- 6. Arrays ---"

// Array literal
FLEX numbers = [1, 2, 3, 4, 5]

PRINT "Array: [1, 2, 3, 4, 5]"
PRINT "First element: "
PRINT numbers[0]
PRINT "Last element: "
PRINT numbers[4]

// Array assignment
FLEX arr = [0, 0, 0]
FLEX arr[0] = 10
FLEX arr[1] = 20
FLEX arr[2] = 30

PRINT "Modified array [10, 20, 30]:"
PRINT arr[0]
PRINT arr[1]
PRINT arr[2]

// Multi-dimensional arrays
FLEX matrix = [[1, 2], [3, 4]]
PRINT "Matrix [1,2], [3,4] - element [0][1]: "
PRINT matrix[0][1]
PRINT ""

// ============================================================================
// 7. CONTROL FLOW - IF/ELSE
// ============================================================================

PRINT "--- 7. Control Flow - IF/ELSE ---"

FLEX score = 85

IF score >= 90 {
    PRINT "Grade: A"
} ELSE {
    IF score >= 80 {
        PRINT "Grade: B"
    } ELSE {
        IF score >= 70 {
            PRINT "Grade: C"
        } ELSE {
            PRINT "Grade: F"
        }
    }
}
PRINT ""

// ============================================================================
// 8. LOOPS - CYCLE
// ============================================================================

PRINT "--- 8. Loops - CYCLE ---"

// Simple count-based loop with auto-generated variable
PRINT "Auto-generated loop variable (A):"
CYCLE 5 {
    PRINT A
}

// Loop with custom variable name
PRINT "Custom loop variable (i):"
CYCLE 5 AS i {
    PRINT i
}

// Nested loops
PRINT "Nested loops (outer=2, inner=3):"
CYCLE 2 AS outer {
    CYCLE 3 AS inner {
        FLEX combined = outer * 10 + inner
        PRINT combined
    }
}

// Expression-based loop count
FLEX loopCount = 3
PRINT "Expression-based loop count:"
CYCLE loopCount AS i {
    PRINT i
}
PRINT ""

// ============================================================================
// 9. FUNCTIONS - BASIC
// ============================================================================

PRINT "--- 9. Functions - Basic ---"

FUNCTION add(INT x, INT y)[INT] {
    RETURN x + y
}

FUNCTION multiply(INT x, INT y)[INT] {
    RETURN x * y
}

FLEX result1 = add(5, 3)
FLEX result2 = multiply(4, 7)

PRINT "add(5, 3) = "
PRINT result1
PRINT "multiply(4, 7) = "
PRINT result2
PRINT ""

// ============================================================================
// 10. FUNCTIONS - WITH EXPRESSIONS
// ============================================================================

PRINT "--- 10. Functions - With Expressions ---"

FUNCTION square(INT n)[INT] {
    RETURN n * n
}

// Function call in expression
FLEX expr1 = square(5) + square(3)
PRINT "square(5) + square(3) = "
PRINT expr1

// Function call with expression argument
FLEX expr2 = square(2 + 3)
PRINT "square(2 + 3) = "
PRINT expr2
PRINT ""

// ============================================================================
// 11. FUNCTIONS - RECURSION
// ============================================================================

PRINT "--- 11. Functions - Recursion ---"

// Factorial
FUNCTION factorial(INT n)[INT] {
    IF n <= 1 {
        RETURN 1
    }
    RETURN n * factorial(n - 1)
}

FLEX fact5 = factorial(5)
FLEX fact7 = factorial(7)

PRINT "factorial(5) = "
PRINT fact5
PRINT "factorial(7) = "
PRINT fact7

// Fibonacci
FUNCTION fib(INT n)[INT] {
    IF n <= 1 {
        RETURN n
    }
    RETURN fib(n - 1) + fib(n - 2)
}

FLEX fib7 = fib(7)
FLEX fib10 = fib(10)

PRINT "fibonacci(7) = "
PRINT fib7
PRINT "fibonacci(10) = "
PRINT fib10
PRINT ""

// ============================================================================
// 12. COMPLEX ALGORITHMS
// ============================================================================

PRINT "--- 12. Complex Algorithms ---"

// Prime number detection
FUNCTION isPrime(INT n)[INT] {
    IF n <= 1 {
        RETURN 0
    }
    IF n == 2 {
        RETURN 1
    }
    
    FLEX i = 2
    CYCLE n - 2 AS i {
        FLEX divisor = i + 2
        IF n % divisor == 0 {
            RETURN 0
        }
    }
    RETURN 1
}

PRINT "isPrime(17) = "
PRINT isPrime(17)
PRINT "isPrime(18) = "
PRINT isPrime(18)

// Sum of squares of even numbers
FUNCTION isEven(INT n)[INT] {
    RETURN (n % 2 == 0)
}

FLEX sumOfSquares = 0
CYCLE 10 AS i {
    FLEX num = i + 1
    IF isEven(num) == 1 {
        FLEX sumOfSquares = sumOfSquares + (num * num)
    }
}

PRINT "Sum of squares of even numbers (1-10) = "
PRINT sumOfSquares
PRINT ""

// ============================================================================
// 13. MIXED FEATURES - COMPLEX EXAMPLE
// ============================================================================

PRINT "--- 13. Mixed Features - Complex Example ---"

// Function using multiple features
FUNCTION processArray(INT size)[INT] {
    FLEX total = 0
    FLEX arr = [0, 0, 0, 0, 0]
    
    CYCLE size AS i {
        FLEX arr[i] = i * 2
        IF arr[i] % 4 == 0 {
            FLEX total = total + arr[i]
        }
    }
    
    RETURN total
}

FLEX complexResult = processArray(5)
PRINT "processArray(5) = "
PRINT complexResult

// Nested function calls with loops and conditions
FUNCTION sumRange(INT start, INT end)[INT] {
    FLEX sum = 0
    FLEX range = end - start + 1
    CYCLE range AS i {
        FLEX value = start + i
        IF value % 2 == 1 {
            FLEX sum = sum + value
        }
    }
    RETURN sum
}

FLEX rangeSum = sumRange(1, 10)
PRINT "Sum of odd numbers from 1 to 10 = "
PRINT rangeSum
PRINT ""

// ============================================================================
// 14. VARIABLE SCOPING
// ============================================================================

PRINT "--- 14. Variable Scoping ---"

FLEX outer = 100

FUNCTION testScope(INT param)[INT] {
    FLEX inner = 200
    FLEX result = param + inner
    RETURN result
}

FLEX scopeResult = testScope(50)
PRINT "Function with local variables: "
PRINT scopeResult

// Loop scoping
FLEX beforeLoop = 10
CYCLE 3 AS i {
    FLEX insideLoop = i * 2
    FLEX beforeLoop = beforeLoop + insideLoop
}
PRINT "Variable modified in loop: "
PRINT beforeLoop
PRINT ""

// ============================================================================
// 15. FUNCTION CALL IN CONDITIONALS
// ============================================================================

PRINT "--- 15. Function Calls in Conditionals ---"

FUNCTION isPositive(INT n)[INT] {
    IF n > 0 {
        RETURN 1
    }
    RETURN 0
}

FLEX testNum = 42

IF isPositive(testNum) == 1 {
    PRINT "42 is positive"
} ELSE {
    PRINT "42 is not positive"
}

IF isPositive(-5) == 0 {
    PRINT "-5 is not positive"
}
PRINT ""

// ============================================================================
// 16. FUNCTION CALL IN LOOPS
// ============================================================================

PRINT "--- 16. Function Calls in Loops ---"

FUNCTION double(INT n)[INT] {
    RETURN n * 2
}

PRINT "Doubling numbers 1-5:"
CYCLE 5 AS i {
    FLEX num = i + 1
    FLEX doubled = double(num)
    PRINT doubled
}
PRINT ""

// ============================================================================
// 17. COMPLEX NESTED STRUCTURES
// ============================================================================

PRINT "--- 17. Complex Nested Structures ---"

FUNCTION calculateSum(INT n)[INT] {
    FLEX total = 0
    CYCLE n AS i {
        FLEX value = i + 1
        IF value % 2 == 0 {
            FLEX total = total + value
        } ELSE {
            CYCLE 2 AS j {
                FLEX total = total + 1
            }
        }
    }
    RETURN total
}

FLEX nestedResult = calculateSum(6)
PRINT "Complex nested calculation: "
PRINT nestedResult
PRINT ""

// ============================================================================
// 18. MULTIPLE FUNCTION CALLS
// ============================================================================

PRINT "--- 18. Multiple Function Calls ---"

FUNCTION addThree(INT a, INT b, INT c)[INT] {
    RETURN a + b + c
}

FUNCTION max(INT a, INT b)[INT] {
    IF a > b {
        RETURN a
    }
    RETURN b
}

FLEX multiResult1 = addThree(10, 20, 30)
FLEX multiResult2 = max(multiResult1, 100)

PRINT "addThree(10, 20, 30) = "
PRINT multiResult1
PRINT "max(60, 100) = "
PRINT multiResult2
PRINT ""

// ============================================================================
// 19. ARRAY OPERATIONS IN LOOPS
// ============================================================================

PRINT "--- 19. Array Operations in Loops ---"

FLEX numbers2 = [10, 20, 30, 40, 50]
FLEX arraySum = 0

CYCLE 5 AS idx {
    FLEX arraySum = arraySum + numbers2[idx]
}

PRINT "Sum of array [10, 20, 30, 40, 50] = "
PRINT arraySum

// Modify array in loop
FLEX arr2 = [1, 2, 3, 4, 5]
CYCLE 5 AS idx {
    FLEX arr2[idx] = arr2[idx] * 10
}

PRINT "Array multiplied by 10:"
CYCLE 5 AS idx {
    PRINT arr2[idx]
}
PRINT ""

// ============================================================================
// FINAL MESSAGE
// ============================================================================

PRINT "=== All PowerScript Language Features Verified ==="
PRINT "Total features demonstrated: 19 categories"
PRINT "Status: All tests passed successfully!"
